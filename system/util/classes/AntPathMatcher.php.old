<?php
/*
 * Copyright 2007 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class AntPathMatcher {

	function AntPathMatcher() {}

	var $pathSeparator = DEFAULT_PATH_SEPARATOR;

	function isPattern($str) {
		return (strpos($str, '*') != -1 || strpos($str, '?')!= -1);
	}

	function match($pattern, $str) {


		if (str_starts_with($str, $this->pathSeparator) != str_starts_with($pattern, $this->pathSeparator)) {
			return false;
		}

		$patDirs = explode($this->pathSeparator,$pattern);
		$strDirs = explode($this->pathSeparator,$str);

		$patIdxStart = 0;
		$patIdxEnd = count($patDirs) - 1;
		$strIdxStart = 0;
		$strIdxEnd = count($strDirs) - 1;

		// Match all elements up to the first **
		while ($patIdxStart <= $patIdxEnd && $strIdxStart <= $strIdxEnd) {
			$patDir = $patDirs[$patIdxStart];
			if ($patDir == ("**")) {
				break;
			}
			if (!$this->matchStrings($patDir, $strDirs[$strIdxStart])) {
				return false;
			}
			$patIdxStart++;
			$strIdxStart++;
		}

		if ($strIdxStart > $strIdxEnd) {
			// String is exhausted, only match if rest of pattern is * or **'s
			if ($patIdxStart == $patIdxEnd && $patDirs[$patIdxStart]== "*" &&
					str_ends_with($str, $this->pathSeparator)) {
				return true;
			}
			for ($i = $patIdxStart; $i <= $patIdxEnd; $i++) {
				if (!$patDirs[$i] == "**") {
					return false;
				}
			}
			return true;
		}
		else {
			if ($patIdxStart > $patIdxEnd) {
				// String not exhausted, but pattern is. Failure.
				return false;
			}
		}

		// up to last '**'
		while ($patIdxStart <= $patIdxEnd && $strIdxStart <= $strIdxEnd) {
			$patDir = $patDirs[$patIdxEnd];
			if ($patDir == "**") {
				break;
			}
			if (!$this->matchStrings($patDir, $strDirs[$strIdxEnd])) {
				return false;
			}
			$patIdxEnd--;
			$strIdxEnd--;
		}
		if ($strIdxStart > $strIdxEnd) {
			// String is exhausted
			for ($i = $patIdxStart; $i <= $patIdxEnd; $i++) {
				if (!$patDirs[$i] == "**") {
					return false;
				}
			}
			return true;
		}

		while ($patIdxStart != $patIdxEnd && $strIdxStart <= $strIdxEnd) {
			$patIdxTmp = -1;
			for ($i = $patIdxStart + 1; $i <= $patIdxEnd; $i++) {
				if ($patDirs[$i]== "**") {
					$patIdxTmp =$i;
					break;
				}
			}
			if ($patIdxTmp == $patIdxStart + 1) {
				// '**/**' situation, so skip one
				$patIdxStart++;
				continue;
			}
			// Find the pattern between padIdxStart & padIdxTmp in str between
			// strIdxStart & strIdxEnd
			$patLength = ($patIdxTmp - $patIdxStart - 1);
			$strLength = ($strIdxEnd - $strIdxStart + 1);
			$foundIdx = -1;
			    for ($i = 0; $i <= $strLength - $patLength; $i++) {
				    for ($j = 0; $j < $patLength; $j++) {
					    $subPat = $patDirs[$patIdxStart + $j + 1];
					    $subStr = $strDirs[$strIdxStart + $i + $j];
					    if (!$this->matchStrings($subPat, $subStr)) {
						    continue 2;
					    }
				    }

				    $foundIdx = $strIdxStart + $i;
				    break;
			    }

			if ($foundIdx == -1) {
				return false;
			}

			$patIdxStart = $patIdxTmp;
			$strIdxStart = $foundIdx + $patLength;
		}

		for ($i = $patIdxStart; $i <= $patIdxEnd; $i++) {
			if (!$patDirs[$i] == "**") {
				return false;
			}
		}

		return true;
	}

	/**
	 * Tests whether or not a string matches against a pattern.
	 * The pattern may contain two special characters:<br>
	 * '*' means zero or more characters<br>
	 * '?' means one and only one character
	 * @param pattern pattern to match against.
	 * Must not be <code>null</code>.
	 * @param str string which must be matched against the pattern.
	 * Must not be <code>null</code>.
	 * @return <code>true</code> if the string matches against the
	 * pattern, or <code>false</code> otherwise.
	 */
	function matchStrings($pattern, $str) {
		//char[] patArr = pattern.toCharArray();
		//char[] strArr = str.toCharArray();
		$patIdxStart = 0;
		$patIdxEnd = strlen($pattern) - 1;
		$strIdxStart = 0;
		$strIdxEnd = strlen($str) - 1;
		//char ch;

		$containsStar = strpos($pattern, '*')>-1;

		if (!$containsStar) {
			// No '*'s, so we make a shortcut
			if ($patIdxEnd != $strIdxEnd) {
				return false; // Pattern and string do not have the same size
			}
			for ($i = 0; $i <= $patIdxEnd; $i++) {
				$ch = substr($pattern, $i,1);
				if ($ch != '?') {
					if ($ch != substr($str, $i,1)) {
						return false;// Character mismatch
					}
				}
			}
			return true; // String matches against pattern
		}


		if ($patIdxEnd == 0) {
			return true; // Pattern contains only '*', which matches anything
		}

		// Process characters before first star
		while (($ch = substr($pattern, $patIdxStart, 1)) != '*' && $strIdxStart <= $strIdxEnd) {
			if ($ch != '?') {
				if ($ch != substr($str, $strIdxStart,1)) {
					return false;// Character mismatch
				}
			}
			$patIdxStart++;
			$strIdxStart++;
		}
		if ($strIdxStart > $strIdxEnd) {
			// All characters in the string are used. Check if only '*'s are
			// left in the pattern. If so, we succeeded. Otherwise failure.
			for ($i = $patIdxStart; $i <= $patIdxEnd; $i++) {
				if (substr($pattern, $i, 1) != '*') {
					return false;
				}
			}
			return true;
		}

		// Process characters after last star
		while (($ch = substr($pattern, $patIdxEnd,1)) != '*' && $strIdxStart <= $strIdxEnd) {
			if ($ch != '?') {
				if ($ch != substr($str, $strIdxEnd, 1)) {
					return false;// Character mismatch
				}
			}
			$patIdxEnd--;
			$strIdxEnd--;
		}
		if ($strIdxStart > $strIdxEnd) {
			// All characters in the string are used. Check if only '*'s are
			// left in the pattern. If so, we succeeded. Otherwise failure.
			for ($i = $patIdxStart; $i <= $patIdxEnd; $i++) {
				if (substr($pattern,$i,1) != '*') {
					return false;
				}
			}
			return true;
		}

		// process pattern between stars. padIdxStart and patIdxEnd point
		// always to a '*'.
		while ($patIdxStart != $patIdxEnd && $strIdxStart <= $strIdxEnd) {
			$patIdxTmp = -1;
			for ($i = $patIdxStart + 1; $i <= $patIdxEnd; $i++) {
				if (substr($pattern,$i,1) == '*') {
					$patIdxTmp = $i;
					break;
				}
			}
			if ($patIdxTmp == $patIdxStart + 1) {
				// Two stars next to each other, skip the first one.
				$patIdxStart++;
				continue;
			}
			// Find the pattern between padIdxStart & padIdxTmp in str between
			// strIdxStart & strIdxEnd
			$patLength = ($patIdxTmp - $patIdxStart - 1);
			$strLength = ($strIdxEnd - $strIdxStart + 1);
			$foundIdx = -1;

			for ($i = 0; i <= $strLength - $patLength; $i++) {
				for ($j = 0; $j < $patLength; $j++) {
					$ch = substr($pattern,$patIdxStart + $j + 1, 1);
					if ($ch != '?') {
						if ($ch != substr($str, $strIdxStart + $i + $j,1)) {
							continue 2;
						}
					}
				}

				$foundIdx = $strIdxStart + i;
				break;
			}

			if ($foundIdx == -1) {
				return false;
			}

			$patIdxStart = $patIdxTmp;
			$strIdxStart = $foundIdx + $patLength;
		}

		// All characters in the string are used. Check if only '*'s are left
		// in the pattern. If so, we succeeded. Otherwise failure.
		for ($i = $patIdxStart; $i <= $patIdxEnd; $i++) {
			if (substr($pattern, $i,1) != '*') {
				return false;
			}
		}

		return true;
	}

	/**
	 * Given a pattern and a full path, returns the non-pattern mapped part. E.g.:
	 * <ul>
	 * <li>'<code>/docs/*</code>' and '<code>/docs/cvs/commit</code> -> '<code>cvs/commit</code>'</li>
	 * <li>'<code>/docs/cvs/*.html</code>' and '<code>/docs/cvs/commit.html</code> -> '<code>commit.html</code>'</li>
	 * <li>'<code>/docs/**</code>' and '<code>/docs/cvs/commit</code> -> '<code>cvs/commit</code>'</li>
	 * <li>'<code>/docs/**\/*.html</code>' and '<code>/docs/cvs/commit</code> -> '<code>cvs/commit.html</code>'</li>
	 * </ul>
	 * <p>Assumes that {@link #match} returns <code>true</code> for '<code>pattern</code>'
	 * and '<code>path</code>', but does <strong>not</strong> enforce this.
	 */
	function extractPathWithinPattern($pattern, $path) {
		$patternParts = explode($this->pathSeparator,$pattern);
		$pathParts = explode($this->pathSeparator,$path);

		$buffer = '';

		// Add any path parts that have a wildcarded pattern part.
		$puts = 0;
		for ($i = 0; $i < count($patternParts); $i++) {
			$patternPart = $patternParts[$i];
			if ((strpos($patternPart,'*') !== FALSE || strpos($patternPart,'?') !== FALSE) && count($pathParts) >= $i + 1) {
				if ($puts > 0) {
					$buffer .= $this->pathSeparator;
				}
				$buffer .= $pathParts[$i];
				$puts++;
			}
		}

		// Append any trailing path parts.
		for ($i = count($patternParts); $i < count($pathParts); $i++) {
			if ($puts > 0 || $i > 0) {
				$buffer .= $this->pathSeparator;
			}
			$buffer .= $pathParts[$i];
		}

		return $buffer;
	}


}
?>
